package com.zang.api.inboundxml.elements.enums;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

@XmlType(name = "bcp_languages")
@XmlEnum
public enum BCPLanguage {

    @XmlEnumValue("af-ZA")
    AF_ZA("af-ZA"),
    @XmlEnumValue("am-ET")
    AM_ET("am-ET"),
    @XmlEnumValue("hy-AM")
    HY_AM("hy-AM"),
    @XmlEnumValue("az-AZ")
    AZ_AZ("az-AZ"),
    @XmlEnumValue("id-ID")
    ID_ID("id-ID"),
    @XmlEnumValue("ms-MY")
    MS_MY("ms-MY"),
    @XmlEnumValue("bn-BD")
    BN_BD("bn-BD"),
    @XmlEnumValue("bn-IN")
    BN_IN("bn-IN"),
    @XmlEnumValue("ca-ES")
    CA_ES("ca-ES"),
    @XmlEnumValue("cs-CZ")
    CS_CZ("cs-CZ"),
    @XmlEnumValue("da-DK")
    DA_DK("da-DK"),
    @XmlEnumValue("de-DE")
    DE_DE("de-DE"),
    @XmlEnumValue("en-AU")
    EN_AU("en-AU"),
    @XmlEnumValue("en-CA")
    EN_CA("en-CA"),
    @XmlEnumValue("en-GH")
    EN_GH("en-GH"),
    @XmlEnumValue("en-GB")
    EN_GB("en-GB"),
    @XmlEnumValue("en-IN")
    EN_IN("en-IN"),
    @XmlEnumValue("en-IE")
    EN_IE("en-IE"),
    @XmlEnumValue("en-KE")
    EN_KE("en-KE"),
    @XmlEnumValue("en-NZ")
    EN_NZ("en-NZ"),
    @XmlEnumValue("en-NG")
    EN_NG("en-NG"),
    @XmlEnumValue("en-PH")
    EN_PH("en-PH"),
    @XmlEnumValue("en-ZA")
    EN_ZA("en-ZA"),
    @XmlEnumValue("en-TZ")
    EN_TZ("en-TZ"),
    @XmlEnumValue("en-US")
    EN_US("en-US"),
    @XmlEnumValue("es-AR")
    ES_AR("es-AR"),
    @XmlEnumValue("es-BO")
    ES_BO("es-BO"),
    @XmlEnumValue("es-CL")
    ES_CL("es-CL"),
    @XmlEnumValue("es-CO")
    ES_CO("es-CO"),
    @XmlEnumValue("es-CR")
    ES_CR("es-CR"),
    @XmlEnumValue("es-EC")
    ES_EC("es-EC"),
    @XmlEnumValue("es-SV")
    ES_SV("es-SV"),
    @XmlEnumValue("es-ES")
    ES_ES("es-ES"),
    @XmlEnumValue("es-US")
    ES_US("es-US"),
    @XmlEnumValue("es-GT")
    ES_GT("es-GT"),
    @XmlEnumValue("es-HN")
    ES_HN("es-HN"),
    @XmlEnumValue("es-MX")
    ES_MX("es-MX"),
    @XmlEnumValue("es-NI")
    ES_NI("es-NI"),
    @XmlEnumValue("es-PA")
    ES_PA("es-PA"),
    @XmlEnumValue("es-PY")
    ES_PY("es-PY"),
    @XmlEnumValue("es-PE")
    ES_PE("es-PE"),
    @XmlEnumValue("es-PR")
    ES_PR("es-PR"),
    @XmlEnumValue("es-DO")
    ES_DO("es-DO"),
    @XmlEnumValue("es-UY")
    ES_UY("es-UY"),
    @XmlEnumValue("es-VE")
    ES_VE("es-VE"),
    @XmlEnumValue("eu-ES")
    EU_ES("eu-ES"),
    @XmlEnumValue("il-PH")
    IL_PH("il-PH"),
    @XmlEnumValue("fr-CA")
    FR_CA("fr-CA"),
    @XmlEnumValue("fr-FR")
    FR_FR("fr-FR"),
    @XmlEnumValue("gl-ES")
    GL_ES("gl-ES"),
    @XmlEnumValue("ka-GE")
    KA_GE("ka-GE"),
    @XmlEnumValue("gu-IN")
    GU_IN("gu-IN"),
    @XmlEnumValue("hr-HR")
    HR_HR("hr-HR"),
    @XmlEnumValue("zu-ZA")
    ZU_ZA("zu-ZA"),
    @XmlEnumValue("is-IS")
    IS_IS("is-IS"),
    @XmlEnumValue("it-IT")
    IT_IT("it-IT"),
    @XmlEnumValue("jv-ID")
    JV_ID("jv-ID"),
    @XmlEnumValue("kn-IN")
    KN_IN("kn-IN"),
    @XmlEnumValue("km-KH")
    KM_KH("km-KH"),
    @XmlEnumValue("lo-LA")
    LO_LA("lo-LA"),
    @XmlEnumValue("lv-LV")
    LV_LV("lv-LV"),
    @XmlEnumValue("lt-LT")
    LT_LT("lt-LT"),
    @XmlEnumValue("hu-HU")
    HU_HU("hu-HU"),
    @XmlEnumValue("ml-IN")
    ML_IN("ml-IN"),
    @XmlEnumValue("mr-IN")
    MR_IN("mr-IN"),
    @XmlEnumValue("nl-NL")
    NL_NL("nl-NL"),
    @XmlEnumValue("ne-NP")
    NE_NP("ne-NP"),
    @XmlEnumValue("nb-NO")
    NB_NO("nb-NO"),
    @XmlEnumValue("pl-PL")
    PL_PL("pl-PL"),
    @XmlEnumValue("pt-BR")
    PT_BR("pt-BR"),
    @XmlEnumValue("pt-PT")
    PT_PT("pt-PT"),
    @XmlEnumValue("ro-RO")
    RO_RO("ro-RO"),
    @XmlEnumValue("si-LK")
    SI_LK("si-LK"),
    @XmlEnumValue("sk-SK")
    SK_SK("sk-SK"),
    @XmlEnumValue("sl-SI")
    SL_SI("sl-SI"),
    @XmlEnumValue("su-ID")
    SU_ID("su-ID"),
    @XmlEnumValue("sw-TZ")
    SW_TZ("sw-TZ"),
    @XmlEnumValue("sw-KE")
    SW_KE("sw-KE"),
    @XmlEnumValue("fi-FI")
    FI_FI("fi-FI"),
    @XmlEnumValue("sv-SE")
    SV_SE("sv-SE"),
    @XmlEnumValue("ta-IN")
    TA_IN("ta-IN"),
    @XmlEnumValue("ta-SG")
    TA_SG("ta-SG"),
    @XmlEnumValue("ta-LK")
    TA_LK("ta-LK"),
    @XmlEnumValue("ta-MY")
    TA_MY("ta-MY"),
    @XmlEnumValue("te-IN")
    TE_IN("te-IN"),
    @XmlEnumValue("vi-VN")
    VI_VN("vi-VN"),
    @XmlEnumValue("tr-TR")
    TR_TR("tr-TR"),
    @XmlEnumValue("ur-PK")
    UR_PK("ur-PK"),
    @XmlEnumValue("ur-IN")
    UR_IN("ur-IN"),
    @XmlEnumValue("el-GR")
    EL_GR("el-GR"),
    @XmlEnumValue("bg-BG")
    BG_BG("bg-BG"),
    @XmlEnumValue("ru-RU")
    RU_RU("ru-RU"),
    @XmlEnumValue("sr-RS")
    SR_RS("sr-RS"),
    @XmlEnumValue("uk-UA")
    UK_UA("uk-UA"),
    @XmlEnumValue("he-IL")
    HE_IL("he-IL"),
    @XmlEnumValue("ar-IL")
    AR_IL("ar-IL"),
    @XmlEnumValue("ar-JO")
    AR_JO("ar-JO"),
    @XmlEnumValue("ar-AE")
    AR_AE("ar-AE"),
    @XmlEnumValue("ar-BH")
    AR_BH("ar-BH"),
    @XmlEnumValue("ar-DZ")
    AR_DZ("ar-DZ"),
    @XmlEnumValue("ar-SA")
    AR_SA("ar-SA"),
    @XmlEnumValue("ar-IQ")
    AR_IQ("ar-IQ"),
    @XmlEnumValue("ar-KW")
    AR_KW("ar-KW"),
    @XmlEnumValue("ar-MA")
    AR_MA("ar-MA"),
    @XmlEnumValue("ar-TN")
    AR_TN("ar-TN"),
    @XmlEnumValue("ar-OM")
    AR_OM("ar-OM"),
    @XmlEnumValue("ar-PS")
    AR_PS("ar-PS"),
    @XmlEnumValue("ar-QA")
    AR_QA("ar-QA"),
    @XmlEnumValue("ar-LB")
    AR_LB("ar-LB"),
    @XmlEnumValue("ar-EG")
    AR_EG("ar-EG"),
    @XmlEnumValue("fa-IR")
    FA_IR("fa-IR"),
    @XmlEnumValue("hi-IN")
    HI_IN("hi-IN"),
    @XmlEnumValue("th-TH")
    TH_TH("th-TH"),
    @XmlEnumValue("ko-KR")
    KO_KR("ko-KR"),
    @XmlEnumValue("cmn-Hant-TW")
    CMN_HANT_TW("cmn-Hant-TW"),
    @XmlEnumValue("yue-Hant-HK")
    YUE_HANT_HK("yue-Hant-HK"),
    @XmlEnumValue("ja-JP")
    JA_JP("ja-JP"),
    @XmlEnumValue("cmn-Hans-HK")
    CMN_HANS_HK("cmn-Hans-HK"),
    @XmlEnumValue("cmn-Hans-CN")
    CMN_HANS_CN("cmn-Hans-CN");

    private final String value;

    BCPLanguage(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static BCPLanguage fromValue(String v) {
        for (BCPLanguage c : BCPLanguage.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
